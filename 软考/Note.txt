PMBOK, 1.4项目组合管理、项目集管理、项目管理和组织级项目管理: 硬是给拆成了，第4、18、20、21章四个部分

管理成熟度模型: 1.4、8.1.3、24
招投标: 3.1.3和26.2
软件工程: 1.4和26.5
信息安全: 1.6和22

初步可行性研究、详细可行性研究: 
3.2.2可行性研究基本阶段: 初步可行性研究、详细可行性研究、可行性研究报告
3.3.1项目论证阶段: 机会研究、初步可行性研究、详细可行性研究
====================================================
成本偏差CV=EV-AC
成本绩效指数CPI=EV/AC
进度偏差SV=EV-PV
进度绩效指数SPI=EV/PV
完工估算EAC非典=BAC-EV+AC
完工估算EAC典=BAC/CPI
ETC非典=BAC-EV
ETC典=(BAC-EV)/CPI=(BAC/CPI)-(EV/CPI)=EAC-AC
完工成本偏差VAC=BAC-EAC
完工尚需绩效指数TCPI=(BAC-EV)/(BAC(EAC)-AC)
估算完工工期EDAC=BDAC/SPI
===================================================
OSI协议7层: 
物理(RJ45)、数据链路(IEEE、PPP)、网络(IP)、传输(TCP、UDP)、表示(RPC、SQL、NFS)、会话、应用(Telnet、SSH、HTTP、FTP、SMTP、SNMP)
===================================================
软件工程: 

需求层次: 
业务、用户、系统

QFD将软件需求分为三类: 
常规、期望、意外
-----------------------------------------------------------------------------------
UML: 
4种事物(建模元素): 
结构(structral things)(类、接口、协作、用例、活动、构件、节点)、行为(behavioral things)(交互、状态机)、分组(grouping things)、注释(annotational things)

4种关系: 
依赖(dependency)、关联(association)、泛化(generalization)、实现(realization)

UML2.0包括14种图: 


5种视图: 
逻辑、进程、实现、部署、用例
------------------------------------------------------------------------------
OOD7种原则: 
单一职则、开/闭、李氏(Liskov)替换、依赖倒置、接口隔离、组合重用、迪米特(Demeter)原则(最少知识法则)

6种测试类型: 
单元、集成、确认、系统、配置项、回归

V模型生命周期对应测试类型: 
单元、集成、系统、验收

5种架构风格: 
1. 数据流: 批处理程序、管道/过滤器
2. 调用/返回: 主/子程序、数据抽象、面向对象、层次结构
3. 单一构件: 进程通信、事件驱动
4. 虚拟机: 解释器、基于规则
5. 仓库: 数据库系统、黑板系统、超文本系统

测试管理包括: 
过程管理、配置管理、评审工作

EAI(企业应用集成)层次和方面:
表示、数据、控制、业务流程、企业之间应用
=========================================================
云计算: 

3种服务类型: 
IaaS、PaaS、SaaS

发展的主要任务6点(P60): 

------------------------------------------
大数据: 

特点5个大V: 
Volumn、Variety、Value、Velocity、Veracity

价值与应用5点: 
征信、风控、消费金融、财富管理、疾病预测

发展应用的目标5点(P65): 

----------------------------------------
移动互联: 

4特点: 
终端的移动性、业务使用的私密性、终端和网络的局限性、业务与终端/网络的强关联性

在市场领域和应用开发领域形成了一些特点，有着划时代的3点重要意义: 
重视对传感器技术的应用、有效地实现人与人的连接、浏览器竞争和孤岛问题突出
--------------------------------------------
信息安全: 

3属性: 
秘密、完整、可用

P29网络安全设计，信息安全的基本要素: 
3属性+(可控、可审查)

系统安全4层次: 
设备(3方面: 稳定、可靠、可用)、数据(3属性)、内容(政治、法律、道德)、行为(秘密、完整、可控)

法律体系4层面: 
一般性法律规定、规范和惩罚信息网络犯罪的法律、直接针对信息安全的特别规定、具体规范信息安全技术/信息安全管理等方面的规定

《信息安全等级保护管理办法》5级: 

A公民、法人和其他组织
B社会秩序和公共利益
C国家安全

A损害
B严重损害
C特别严重损害

第一级: AA
第二级: AB或BA, 指导
第三级: BB或CA, 监督、检查
第四级: BC或CB, 强制监督、检查
第五级: CC, 专门监督、检查

GB17859-1999保护能力5级: 
用户自主、系统审计、安全标记、结构化、访问验证

7项技术: 
加密、防火墙、入侵检测、漏洞扫描、备份、计算机病毒防御、反垃圾邮件

系统安全: 
5系统: 计算机、网络、操作、数据库、应用

计算机设备安全要包括计算机实体及其信息的6个关键因素: 
信息安全3属性+抗否认、可审计、可靠

网络安全: 
3问题: 


8威胁: 


5技术: 
防火墙、VPN、入侵检测与防御、安全扫描、网络蜜罐

操作系统安全: 
安全威胁: 
4种方式: 
切断、截取、篡改、伪造

5种形式: 
计算机病毒、逻辑炸弹、特洛伊木马、后门(恶意代码)、隐蔽通道(安全策略)

主要目标包括6个方面: 


数据库系统安全: 


应用系统安全: 
Web威胁防护4技术: 
访问控制、单点登录、网页防篡改(时间轮询、核心内嵌、事件触发、文件过滤)、Web内容安全(电子邮件过滤、网页过滤、反间谍软件)
------------------------------------------
国家信息化发展战略: 

《2006-2020年国家信息化民展战略》4目标: 

----------------------------------------
智能、智慧3特点: 
感知、记忆和思维、学习和自适应
------------------------------------------
智慧城市建设参考模型包括: 

有依赖关系的5层: 
物联感知、通信网络、计算与存储、数据及服务支撑、智慧应用

对建设有约束的3个支撑体系: 
安全保障、建设和运营管理、标准和规范
=========================================================
信息系统项目典型生命周期: 
瀑布、螺旋、迭代、V模型、原型、敏捷
=========================================================
测试

5种模型: V、W、H、X、前置测试

类型
开发阶段(4种): 单元、集成、系统、验收
测试实施组织(3种): 开发方(Alpha)、用户(Beta)、第三方
测试技术(3种): 黑盒、白盒、灰盒
测试执行方式: 静态、动态
测试对象类型: 功能、界面、流程、接口、安装、文档、源代码、性能、数据库、网络
质量属性: 容错性、兼容性、安全性、可靠性、可用性、维护性、可移植性、易用性
测试地域: 本地化、国际化

技术
黑盒: 测试区域确定法、组合覆盖法、逻辑推断法、业务路径覆盖法
白盒: 静态、动态
=========================================================
项目文件: 
项目章程、项目进度计划、进度网络图、问题日志、质量核对单、识别风险的其他信息

群体创新: 
头脑风暴、名义小组、概念/思维导图、亲和图、多标准决策分析

群体决策: 
一致同意(德尔菲, 专家达成一致)、大多数原则、相对多数原则、独裁

备选方案生成: 
头脑风暴、备选方案分析、横向思维


=======================================================
质量管理

规划质量管理: 
输入: 项目管理计划、事业环境因素、组织过程资产、需求文件、风险登记册、干系人登记册
工具: 7QC、标杆对照、实验设计、成本效益分析、质量成本、其他工具(头脑风暴、名义小组、力场分析、新7QC)
输出: 质量管理计划、过程改进计划、质量测量指标、质量核对单、项目文件更新

QA: 
输入: 质量管理计划、过程改进计划、质量测量指标、QC测量结果、项目文件
工具: 新7QC、质量审计、过程分析
输出: 项目管理计划更新、组织过程资产更新、项目文件更新、变更请求

QC: 
输入: 项目管理计划、组织过程资产、质量测量指标、质量核对单、工作绩效数据、批准的变更请求、可交付成果、项目文件
工具: 7QC、标杆对照、检查、审查已批准的变更
输出: QC测量结果、核实的可交付成果、确认的变更、(工作绩效信息、变更请求、项目文件更新、项目管理计划更新、组织过程资产更新)同控制风险输出
----------------------------------
7QC: 
因果图/石川图/鱼骨图、流程图/过程图、核查表/计数表、帕累托图/柏拉图、直方图、控制图、散点图/相关图

新7QC-质量管理和控制工具: 
亲和图、过程决策程序图(PDPC)、关联图、树形图、活动网络图、优先矩阵、矩阵图

识别最佳实践: 标杆对照、质量审计
实验设计: 识别哪些因素对特定变量产生影响

QA定义: 是为满足1和2, 确保采用合理的3和4的过程
1. 审计质量要求
2. QC测量结果
3. 质量标准
4. 操作性定义

质量测量指标例子7个: 
==================================================
人力资源管理: 
规划: 
输入: 事业环境因素、组织过程资产、项目管理计划、活动资源需求
工具: 专家判断、会议、人际交往、组织理论、组织图和职位描述
输出: 人力资源管理计划(角色与职责、项目组织图、人员配备管理计划)

组建: 
输入: 事业环境因素、组织过程资产、人力资源管理计划
工具: 预分派、谈判、招募、虚拟团队、多标准决策分析
输出: 项目人员分派、资源日历、项目管理计划更新

建设: 
输入: 人力资源管理计划、项目人员分派、资源日历
工具: 人际关系技能、培训、团建活动、集中办公、认可与奖励、人事测评工具、基本规则
输出: 团队绩效评价、事业环境因素更新

管理: 
输入: 
工具: 人际关系技能、观察和交谈、冲突管理、项目绩效评估
输出: 
-----------------------------------------------------
团队发展5个阶段: 形成、震荡、规范、成熟(发挥)、解散
冲突管理5种解决办法: 合作/解决问题(Collaborate/Problem Solve)、强迫/命令(Force/Direct)、缓和/包容(Smooth/Accommodate)、撤退/回避(Withdraw/Avoid)、妥协/调解(Compromise/Reconcile)
权力(Power)5种: 职位(Legitimate)、惩罚(Coercive)、奖励(Reward)、专家(Expert)、参照(Referent)
认可与奖励: 马斯洛需求层次理论、赫茨博格双因素理论、X理论Y理论、期望理论
人际关系技能: 领导力、影响力、有效决策
影响力: 
==========================================================
风险管理

规划: 
工具: 
输出: 风险管理计划

识别: 
输入: 人力资源管理计划、风险管理计划、进度管理计划、成本管理计划、质量管理计划、范围基准、活动持续时间估算、活动成本估算、干系人登记册、采购文件、项目文件、组织过程资产、事业环境因素
工具: 核对单分析、假设分析、SWOT分析、信息收集技术、图解技术、专家判断
输出: 风险登记册

定性: 
输入: 风险管理计划、风险登记册、范围基准、事业环境因素、组织过程资产
工具: 文档审查、风险概率和影响评估、风险数据质量评估、风险紧迫性评估、概率和影响矩阵、风险分类
输出: 项目文件更新

定量: 
输入: 
工具: 数据收集和展示技术、定量分析和建模技术、专家判断
输出: 项目文件更新

应对: 
输入: 风险管理计划、风险登记册
工具: 消极风险或机会的应对策略、积极风险或机会的应对策略、应急应对策略、专家判断
输出: 项目文件更新、项目管理计划更新

控制: 
输入: 
工具: 风险再评估、风险审计、偏差和趋势分析、储备分析、技术绩效测量、会议
输出: (工作绩效信息、变更请求、项目文件更新、项目管理计划更新、组织过程资产更新)同QC输出
-------------------------------------
识别风险, 信息收集技术: 
头脑风暴、德尔菲、访谈、根本原因分析

识别风险, 图解技术: 
因果图/石川图/鱼骨图、系统或过程流程图、影响图

数据收集和展示技术: 
访谈、概率分布(贝塔分布、三角分布)

定量分析和建模技术: 
敏感性分析(龙卷风图)、预期货币价值(EMV)分析、建模和模拟

消极风险或机会的应对策略: 
规避、转移、减轻、接受

积极风险或机会的应对策略: 
开拓、提高、分享、接受
====================================================




















现在的人怎么都这样呢，张嘴闭嘴微服务的，微服务毕竟是通过网络IO跨进程调的，性能上肯定是比不了单体服务在同一进程内调用。
开发团队在20人以下的完全没必要用微服务，完全可以每个小组维护一个maven工程，谁用谁依赖过来，在自己的单体服务中的当前进程内调。
微服务解决的问题就一个，用长连接代替http的短连接以提高网络IO的效率，就像数据库的连接池一样。
微服务适用于开发团队部门众多、人数比较庞大，每个部门的业务独立性较强，各自规划、维护自己的系统，即便是不用使用微服务，也需要提供http接口服务的情况。
说到拆服务有什么什么好处，那web服务也能拆你怎么不拆啊！
说到微服务在程序调用方面可以像面向对象一样调用，现在调http接口也有面向对象的框架好吧！就算没有，自己现写一套也不是什么难事吧！
说微服务加集群节点灵活，狗P！单体服务不灵活呗？
举个栗子，现有两个微服务，服务A和服务B，服务器两台，1号服务器和2号服务器，要想让系统正常干活你得把A、B服务都得部署上吧？这样必然要把这两台服务器全部占用，假如挂掉一个，整个系统跟着瘫痪。如果是单体服务，完全可以两台服务器各部署一个相同节点做集群，挂了一个对系统功能上也没影响，只不过就是性能差点呗。相比之下，还能说微服务多多多牛逼吗！
