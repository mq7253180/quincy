安装WSL 2: 
https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel

安装后以管理员身份运行PowerShell执行: 
wsl --set-version Ubuntu-20.04 2
wsl --set-default-version 2
验证: 
wsl -l -v

更改镜像文件路径: 
mklink /J "C:\Users\Public\Documents\Hyper-V\Virtual hard disks" "D:\Virtual hard disks"

Try running a container: Copy and paste this command into your terminal and then come back
docker run -d -p 80:80 docker/getting-started

docker search -f stars=10 java
docker search jdk
docker pull openjdk:11
docker build --rm -f "Dockerfile" -t java-hello:latest .
docker run --name xxx -d java-hello:latest
docker run --name zzz -d -p 9090:8080 aliyun/gts:1.0
docker exec -it [] bash
docker container rm CONTAINER ID
docker container kill CONTAINER ID
docker container stop CONTAINER ID

镜像仓库：
docker pull registry
docker run -p 5000:5000 -v D:/docker/registry:/var/lib/registry -d --restart=always registry
docker tag aliyun/gts:1.0 localhost:5000/aliyun/gts:1.0
docker push localhost:5000/aliyun/gts:1.0

http://ip:port/v2/_catalog
http://ip:port/v2/镜像名称/tags/list

删除一个镜像: 
docker image rm REPOSITORY或IMAGE ID
docker rmi REPOSITORY或IMAGE ID

同一个IMAGE ID可能被多个REPOSITORY指向，如果多个REPOSITORY指向同一个IMAGE ID
删除IMAGE ID会报Error response from daemon: conflict: unable to delete 5384c7dab7fe (must be forced) - image is referenced in multiple repositories
删除REPOSITORY只会Untagged当前一条
剩最后一条时再删除REPOSITORY会报：Error response from daemon: conflict: unable to remove repository reference "aliyun/gts:latest" (must force) - container ef1aa42cad22 is using its referenced image 5384c7dab7fe

停止一个容器：
docker stop CONTAINER_ID
删除一个容器：
docker rm CONTAINER_ID

K8S命令: 
kubectl get 资源类型 --all-namespaces
kubectl describe 资源类型 -n NAMESPACE NAME
kubectl logs -f --tail -n NAMESPACE NAME -c CONTAINER_NAME
kubectl delete pod -n NAMESPACE NAME
kubens NAMESPACE

kubectl get cm tesla-svc -o yaml
kubectl get deploy --show-labels
kubectl apply -f tesla-svc.yaml
kubectl exec -ti [] bash
kubectl exec -it -n NAMESPACE NAME bash
docker exec -it [] bash

在K8S中创建SLB型svc时一直创建中: 
kubectl get svc
显示EXTERNAL-IP一直处于<pending>状态

kubectl describe svc/tesla-slb: 查看服务详细
kubectl get svc --all-namespaces: 看下集群内部pending状态的svc多么
kubectl get pods -n kube-system|grep cloud-c: 112分钟重启了20次，观察10分钟，看下是否还有重启记录
kubectl get po: 列出所有容器
kubectl logs -f 容器name
docker ps -a|grep cloud-c
docker logs -f --tail 50 $containerid: 看下这个容器退出日志
kubectl get po -n kube-system|grep nginx
kubectl get pods --kubeconfig=
kubectl get statefulset edas-eam-edas -o yaml|grep mem
kubectl edit statefulset edas-eam-edas

NodeIP、PodIP、ClusterIP

port、targetPort、nodePort
========================================
区别：
RUN、CMD、ENTRYPOINT
ADD、COPY
==================================================
<plugin>
             <groupId>com.spotify</groupId>
             <artifactId>docker-maven-plugin</artifactId>
             <version>1.2.2</version>
             <configuration>
                 <imageName>aliyun/gts</imageName>
                 <imageTags>
                  <imageTag>1.0</imageTag>
                 </imageTags>
                 <forceTags>true</forceTags>
                 <!-- <dockerHost>http://localhost:2375</dockerHost>
                 <registryUrl>localhost:5000</registryUrl>
                 <pushImage>true</pushImage>
                 <pushImageTag>true</pushImageTag> -->

     <!-- Dockerfile两种方式 -->
     <!-- 方式一：插件自动生成 -->
     <baseImage>openjdk:11</baseImage>
     <workdir>/application/gts</workdir>
     <cmd>["java", "-version"]</cmd>
     <entryPoint>["java", "-jar", "${project.build.finalName}.jar"]</entryPoint>
     <maintainer>aliyun-gts@alibaba-inc.com</maintainer>

     <!-- 方式二：手动编写 -->
                 <!-- 指定Dockerfile所在目录，会将该目录下所有文件复制到targetPath，所以将Dockerfile单独放在一个目录中，还可以将配置jvm参数的conf文件放在里面一起被复制过去 -->
                 <!-- <dockerDirectory>${pom.basedir}/docker</dockerDirectory> -->
                 <resources>
                  <!-- targetPath的根目录是工程目录中的target/docker目录，Dockerfile、jar和conf等文件都会被复制过来，并添加到镜像中的对应目录中 -->
                     <resource>
                      <!-- 复制jar文件 -->
                         <targetPath>/application/gts</targetPath>
                         <directory>${project.build.directory}</directory>
                         <include>${project.build.finalName}.jar</include>
                     </resource>
                     <!-- 复制conf文件，方式二不需要 -->
                     <resource>
                         <targetPath>/application/gts</targetPath>
                         <directory>${pom.basedir}/docker/application/gts</directory>
                         <include>${project.build.finalName}.conf</include>
                     </resource>
                 </resources>
             </configuration>
         </plugin>

mvn构建spring boot工程时加上docker:build

报错: No plugin found for prefix 'docker' in the current project and in the plugin groups
在settings.xml中加<pluginGroup>com.spotify</pluginGroup>
==================================================================
专有钉钉交付

本机
docker login tesla-registry.cn-zhangjiakou.cr.aliyuncs.com
docker pull NAME[:TAG|@DIGEST]
docker save –o [生成tar文件的路径] [IMAGES...]

云上k8s主节点
docker login
docker load < [镜像文件路径]将镜像文件加载到本地仓库（tar、tar.gz均可）
docker tag tesla-registry.cn-zhangjiakou.cr.aliyuncs.com/tesla_online/one-security:1.3.2 qqq.xxx.com/zzz-pro/one-security:1.3.2
docker push qqq.xxx.com/zzz-pro/one-security:1.3.2

创建ConfigMap
kubectl apply –f tesla-ConfigMap.yaml

创建Pod启动服务
kubectl apply –f tesla-Deployment.yaml
kubectl get po可查看状态，READY字段值为1/1代表部署成功
kubectl logs -f --tail 50 tesla-client-deployment-54d75b45d-b7nw6

创建service
kubectl apply –f tesla-Service .yaml
-------------------------------------------统计云OCR--------------------------------------------------------------
统计局OCR

docker inspect 8d3|grep duguangExposePort

docker exec -t xxxx ps -aux

nvidia-docker run -d --privileged --restart=always --net=host --add-host=dsjc-test.obsv3.gtzx-dsjyyq-3.tjy.stats.gov.cn:10.211.16.253 -e APES_ADDRS=127.0.0.1 -e APES_PORT=8088 -e duguangExposePort=80 ${tag:version}
-------------------------------------------阿里云容器镜像仓库------------------------------------------------------------
1. 登录企业版实例

$ docker login --username=霍邱县第一人民医院 bcpopen-registry.cn-hangzhou.cr.aliyuncs.com

用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。

您可以在访问凭证页面修改凭证密码。
2. 从Registry中拉取镜像

$ docker pull bcpopen-registry.cn-hangzhou.cr.aliyuncs.com/bcpopen-1/bcpopen-1:[镜像版本号]

3. 将镜像推送到Registry

$ docker login --username=霍邱县第一人民医院 bcpopen-registry.cn-hangzhou.cr.aliyuncs.com
$ docker tag [ImageId] bcpopen-registry.cn-hangzhou.cr.aliyuncs.com/bcpopen-1/bcpopen-1:[镜像版本号]
$ docker push bcpopen-registry.cn-hangzhou.cr.aliyuncs.com/bcpopen-1/bcpopen-1:[镜像版本号]

请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。
4. 选择合适的镜像仓库地址

从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。

如果您使用的机器位于VPC网络，请使用 bcpopen-registry-vpc.cn-hangzhou.cr.aliyuncs.com 作为Registry的域名登录。
5. 示例

使用"docker tag"命令重命名镜像，并将它通过专有网络地址推送至Registry。

$ docker images
REPOSITORY                                                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
registry.aliyuncs.com/acs/agent                                    0.7-dfb6816         37bb9c63c8b2        7 days ago          37.89 MB
$ docker tag 37bb9c63c8b2 bcpopen-registry-vpc.cn-hangzhou.cr.aliyuncs.com/acs/agent:0.7-dfb6816

使用 "docker push" 命令将该镜像推送至远程。

$ docker push bcpopen-registry-vpc.cn-hangzhou.cr.aliyuncs.com/acs/agent:0.7-dfb6816
